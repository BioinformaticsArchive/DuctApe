#!/usr/bin/python
"""
DuctGenome

Analyze genome(s) and map them to KEGG
"""
from Bio import SeqIO
from ductape import __version__
from ductape.actions import dInit, touchProject, dGenomeClear, dGenomeRemove, \
    dGenomeAdd, dGenomeDirAdd, dGenomeMutAdd, dGetGenomeSteps, prepareDir, \
    dPanGenomeAdd, dGenomeSetKind, getPathsReacts, prepareColors, createLegend,\
    dGenomeStats, dGenomeExport
from ductape.common.colorlog import ColorFormatter
from ductape.genome.map2KO import LocalSearch, OnlineSearch
from ductape.genome.pangenome import PanGenomer
from ductape.kegg.kegg import KoMapper, KeggColor, MapsFetcher
from ductape.storage.SQLite.database import Organism, Project, Genome, Kegg
from ductape.terminal import RunThread
import argparse
import logging.handlers
import numpy as np
import os
import sys
# TODO: handle this imports somewhere else
from matplotlib import cm

__author__ = "Marco Galardini"
__prog__ = "dgenome"

################################################################################
# Log setup

logger = logging.getLogger()

################################################################################
# Methods

def dinit(options, wdir, project):
    if not dInit(project, wdir, options.name, options.descr):
        logger.warning('You can remove the old project file or run dape rm')
        return False
    else:
        return True

def dadd(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeAdd(project, options.orgID, options.file, options.n, options.d)

def daddDir(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeDirAdd(project, options.folder, options.e)

def daddMut(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeMutAdd(project, options.mutID, options.m,
                         options.mutfasta,
                         options.k, options.n, options.d)

def dstart(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    if options.cpu <= 0:
        logging.warning('How can i use %d cpus?'%options.cpu)
        return False
    
    tmp = os.path.join(wdir,'tmp')
    if not prepareDir(wdir, 'tmp'):
        return False
    
    proj = Project(project)
    org = Organism(project)
    gen = Genome(project)
    
    if len(org) == 0:
        logger.warning('No organisms are present yet!')
        logger.warning('Use %s add or %s add-dir!'%(__prog__, __prog__))
        return False
    
    steps = dGetGenomeSteps(project)
    if 'pangenome' in steps or 'map2ko' in steps:
        # Prepare the genomic files
        protdir = os.path.join(tmp,'proteins')
        if not os.path.exists(protdir):
            try:
                os.mkdir(protdir)
            except:
                logger.error('Could not create tmp directory %s'%protdir)
                return False
        infiles = {}
        for organism in org.getAll():
            protfile = os.path.join(protdir, organism.org_id)
            infiles[organism.org_id] = protfile
            SeqIO.write(gen.getRecords(organism.org_id),
                        open(protfile, 'w'), 'fasta')
        #
    for step in steps:
        if step == 'pangenome':
            if options.s:
                logger.warning('Skipping pangenome calculation')
                continue
            if not doPanGenome(project, infiles, options.cpu, options.prefix):
                logger.error('PanGenome could not be calculated!')
                return False
        elif step == 'map2ko':
            if not doMap2KO(project, infiles, local=options.l, keggdb=options.k):
                logger.error('Genome(s) could not be mapped to ko!')
                return False
            if options.l:
                proj.setGenome('map2ko')
                org.setAllGenomeStatus('map2ko')
            else:
                break
        elif step == 'map2kegg':
            if not doMap2KEGG(project):
                logger.error('Genome(s) could not be mapped to kegg!')
                return False
            proj.setGenome('map2kegg')
            org.setAllGenomeStatus('map2kegg')
        else:
            logger.warning('Unrecognized analysis %s'%step)
    
    return True
    
def dmap(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    proj = Project(project)
    proj.getProject()
    if proj.genome != 'map2kegg':
        logger.warning('Genome mapping to KEGG has not yet been performed!')
        logger.warning('Nothing to be mapped')
        return
    
    kegg = Kegg(project)
    
    kind = dGenomeSetKind(project)
    
    paths = getPathsReacts(project)
    
    if len(options.organisms) == 0:
        # PanGenome or all genomes?
        if kind != 'mutants' and options.all:
            logger.info('Going to generate all the single genomic maps')
            
            organism = Organism(project)
            for org_id in [x.org_id for x in organism.getAll()]:
                logger.info('Going to generate the metabolic map for %s'%org_id)
                
                # Create the legend
                legend = createLegend('single')
                
                if not doFetchMaps(project, org_id, paths, legend):
                    return False
                
        elif proj.isPanGenome() and kind == 'pangenome':
            logger.info('Going to generate a pangenomic metabolic map')
            
            # Some info
            logger.info('Single genome maps can be created using %s map orgID1 orgID2 ...'%
                        __prog__)
            logger.info('All the single genome maps can be created using %s map -a'%
                        __prog__)
            
            # Get the reactions in the pangenome space
            core = {}
            for cR in kegg.getCoreReact():
                core[cR.re_id] = cR.num
            
            disp = {}
            for cR in kegg.getDispensableReact():
                disp[cR.re_id] = cR.num
                
            # Get the intersected reactions
            mix_id = set(core.keys()).intersection(set(disp.keys()))
            mix = {}
            for re_id in mix_id:
                mix[re_id] = core[re_id] + disp[re_id]
            for re_id in mix_id:
                del core[re_id]
                del disp[re_id]
            
            # Go for the colors!
            # Mix
            hexmix = prepareColors(mix, cm.Greens(np.arange(85,256)))
            
            # Core
            hexcore = prepareColors(core, cm.Blues(np.arange(85,256)))
                
            # Dispensable
            hexdisp = prepareColors(disp, cm.Oranges(np.arange(85,256)))
            
            # Create the legend
            legend = createLegend('pangenome')
            
            # Create the input objects
            colorPaths = []
            for path in paths:
                KC = KeggColor(path)
                dreact = {}
                for re_id in paths[path]:
                    if re_id in mix:
                        dreact[re_id] = hexmix[mix[re_id]]
                    elif re_id in core:
                        dreact[re_id] = hexcore[core[re_id]]
                    elif re_id in disp:
                        dreact[re_id] = hexdisp[disp[re_id]]
                    else:
                        dreact[re_id] = '#FFFFFF'
                KC.setReactions(dreact)
                KC.setMap(kegg.getPathway(path).html)
                colorPaths.append(KC)
                
            # Go!
            kmap = MapsFetcher(colorPaths, prefix='pangenome', legend=legend)
    
            if not RunThread(kmap):
                return False
            
            logger.info('%d maps are available in %s'%(len(kmap.pics),
                                                       kmap._keggroom))
                
        elif kind == 'single':
            logger.info('Going to generate a genomic metabolic map')
            
            organism = Organism(project)
            org_id = [x for x in organism.getAll()][0]
            
            # Create the legend
            legend = createLegend('single')
            
            if not doFetchMaps(project, org_id, paths, legend):
                return False
        
        elif kind == 'mutants':
            logger.info('Going to generate mutants metabolic map')
        
            organism = Organism(project)
        
            refs = [org.org_id
                    for org in organism.getAll()
                    if not organism.isMutant(org.org_id)]
        
            for ref_id in refs:
                logger.info('Going to generate the metabolic map for reference %s'%
                            ref_id)
                
                # Create the legend
                legend = createLegend('single')
                
                if not doFetchMaps(project, ref_id, paths, legend):
                    return False
                
                muts = [x for x in organism.getOrgMutants(ref_id)]
                for mut_id in muts:
                    logger.info('Going to generate the metabolic map for mutant %s (parent %s)'%
                            (mut_id,ref_id))
                    
                    # Get the reactions in the mutant space
                    mut = {}
                    for mR in kegg.getOrgReact(mut_id):
                        mut[mR.re_id] = mR.num
                    
                    ref = {}
                    for rR in kegg.getReferenceReact(mut_id, ref_id):
                        ref[rR.re_id] = rR.num
                    
                    # Get the intersected reactions
                    mix_id = set(mut.keys()).intersection(set(ref.keys()))
                    mix = {}
                    for re_id in mix_id:
                        mix[re_id] = ref[re_id] + mut[re_id]
                    for re_id in mix_id:
                        del mut[re_id]
                        del ref[re_id]
                    
                    # Go for the colors!
                    # Mix
                    hexmix = prepareColors(mix, cm.copper_r(np.arange(1,170)))
                    
                    # mut
                    hexmut = prepareColors(mut, cm.Reds(np.arange(85,256)))
                        
                    # ref
                    hexref = prepareColors(ref, cm.Greens(np.arange(85,256)))
                    
                    # Create the legend
                    legend = createLegend('mutants')
                    
                    # Create the input objects
                    colorPaths = []
                    for path in paths:
                        KC = KeggColor(path)
                        dreact = {}
                        for re_id in paths[path]:
                            if re_id in mix:
                                dreact[re_id] = hexmix[mix[re_id]]
                            elif re_id in mut:
                                dreact[re_id] = hexmut[mut[re_id]]
                            elif re_id in ref:
                                dreact[re_id] = hexref[ref[re_id]]
                            else:
                                dreact[re_id] = '#FFFFFF'
                        KC.setReactions(dreact)
                        KC.setMap(kegg.getPathway(path).html)
                        colorPaths.append(KC)
                        
                    # Go!
                    kmap = MapsFetcher(colorPaths, prefix=mut_id, legend=legend)
            
                    if not RunThread(kmap):
                        return False
                    
                    logger.info('%d maps are available in %s'%(len(kmap.pics),
                                                               kmap._keggroom))
        else:
            logger.warning('Unattended case %s'%kind)
            
    else:
        orgs = set(options.organisms)
        
        organism = Organism(project)
        
        for org_id in orgs:
            if not organism.isOrg(org_id):
                logger.warning('Genome %s is not present: skipping'%org_id)
                continue
            
            logger.info('Going to generate the metabolic map for %s'%org_id)
            
            # Create the legend
            legend = createLegend('single')
            
            if not doFetchMaps(project, org_id, paths, legend):
                return False
            
def dstats(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeStats(project)

def dexport(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeExport(project)

def daddKo(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    kegg = Kegg(project)
    gen = Genome(project)
    proj = Project(project)
    org = Organism(project)
    
    kaas = OnlineSearch()
    for filename in options.kofile:
        logging.info('Parsing KAAS output %s'%filename)
        kaas.parseKAAS(filename)
        # TODO: here check if results are empty
        kegg.addDraftKOs( set(kaas.results.values()) )
        prot_ko = [[x,y] for x,y in kaas.results.iteritems()]
        gen.addKOs( prot_ko )
    
    logger.info('Mapped %d proteins to KO'%len(kaas.results))
    proj.setGenome('map2ko')
    org.setAllGenomeStatus('map2ko')
    
def daddPanGenome(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPanGenomeAdd(project, options.orthfile)

def dremove(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be removed!\n'+
                       'You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeRemove(project, options.organisms)

def dclear(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be cleaned up!\n'+
                       'You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeClear(project)

def doPanGenome(project, infiles, cpu=1, prefix=''):
    pang = PanGenomer(infiles.values(), ncpus=cpu, prefix=prefix)
    
    if not RunThread(pang):
        return False
    
    gen = Genome(project)
    gen.addPanGenome(pang.orthologs)
    
    logger.info('PanGenome size: %d groups'%len(gen.getPanGenome()))
    logger.info('Core size: %d groups'%gen.getLenCore())
    logger.info('Accessory size: %d groups'%gen.getLenAcc())
    logger.info('Unique size: %d groups'%gen.getLenUni())
    
    return True

def doMap2KO(project, infiles, local=False, keggdb='', cpu=1):
    org = Organism(project)
    kegg = Kegg(project)
    gen = Genome(project)
    
    if local:
        for org_id, infile in infiles.iteritems():
            komap = LocalSearch(infile, keggdb, ncpus=cpu)
            if not RunThread(komap):
                return False
            org.setGenomeStatus(org_id, 'map2ko')
            kegg.addDraftKOs( set(komap.results.values()) )
            gen.addKOs( komap.results.iteritems() )
            logger.info('%s - mapped %d proteins to KO'%
                        (org_id, len(komap.results)))
    else:
        kaas = OnlineSearch()
        sys.stdout.write(kaas.getExplanation() + '\n')
        sys.stdout.write('When the analysis are finished launch %s add-ko\n'%
                         __prog__)
        
    return True

def doMap2KEGG(project):
    kegg = Kegg(project)
    kos = [ko.ko_id for ko in kegg.getKO2Analyze()]
    if len(kos) == 0:
        logger.warning('No KO entries to be analyzed!')
        return False
    avoid = [kid for kid in kegg.getAllIDs()]
    
    komap = KoMapper(kos,avoid=avoid)
    
    if not RunThread(komap):
        return False
    
    # Details
    kegg.addKOs(komap.result.ko)
    logger.info('Added %d KO IDs'%len(komap.result.ko))
    kegg.addReactions(komap.result.react)
    logger.info('Added %d Re IDs'%len(komap.result.react))
    kegg.addCompounds(komap.result.comp)
    logger.info('Added %d Co IDs'%len(komap.result.comp))
    kegg.addPathways(komap.result.path)
    logger.info('Added %d Path IDs'%len(komap.result.path))
    # Links
    kegg.addKOReacts(komap.result.koreact)
    kegg.addPathComps(komap.result.pathcomp)
    kegg.addPathReacts(komap.result.pathreact)
    logger.info('Added Kegg links')
    # HTML maps
    kegg.addPathHtml(komap.result.pathmaps)
    logger.info('Added Kegg maps')
    
    return True

def doFetchMaps(project, org_id, paths, legend=None):
    kegg = Kegg(project)
    
    # Get the reactions in the organism space
    org = {}
    for oR in kegg.getOrgReact(org_id):
        org[oR.re_id] = oR.num
        
    # Go for the colors!
    hexorg = prepareColors(org, cm.Greens(np.arange(85,256)))
        
    # Create the input objects
    colorPaths = []
    for path in paths:
        KC = KeggColor(path)
        dreact = {}
        for re_id in paths[path]:
            if re_id in org:
                dreact[re_id] = hexorg[org[re_id]]
            else:
                dreact[re_id] = '#FFFFFF'
        KC.setReactions(dreact)
        KC.setMap(kegg.getPathway(path).html)
        colorPaths.append(KC)
        
    # Go!
    kmap = MapsFetcher(colorPaths, prefix=org_id, legend=legend)

    if not RunThread(kmap):
        return False
    
    logger.info('%d maps are available in %s'%(len(kmap.pics), kmap._keggroom))
    
    return True

################################################################################
# Options

def getOptions():
    description = "Add and analyze genomes"
    parser = argparse.ArgumentParser(description = description,
                                     prog=__prog__)
    parser.add_argument('-p', metavar='project', action='store',
                        dest='project',
                        default='ductape.db',
                        help='Project file')
    parser.add_argument('-w', metavar='workdir', action='store', dest='wdir',
                        default='.',
                        help='Working directory')
    parser.add_argument('-v', action='count',
                        default=0,
                        help='Increase verbosity level')
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)
    subparsers = parser.add_subparsers()

    parser_init = subparsers.add_parser('init', help='Initialize the project')
    parser_init.add_argument('-n', action="store",
                             dest='name',
                             default = 'Project',
                             help='Project name')
    parser_init.add_argument('-d', metavar='descr', action="store",
                            dest='descr',
                            default = 'DuctApe project',
                            help='Project description')
    parser_init.set_defaults(func=dinit)

    parser_add = subparsers.add_parser('add',
                           help='Add a single genome')
    parser_add.add_argument('file', action="store",
                            help='Protein fasta file')
    parser_add.add_argument('orgID', action='store',
                            help='Organism ID')
    parser_add.add_argument('-n', metavar='name', action="store",
                            default = '',
                            help='Organism name')
    parser_add.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add.set_defaults(func=dadd)
    
    parser_add_dir = subparsers.add_parser('add-dir',
           help='Add a series of genomes (orgIDs will be guessed)')
    parser_add_dir.add_argument('folder', action="store",
                            help='Folder where the genomes fasta are stored')
    parser_add_dir.add_argument('-e', metavar='extension', action="store",
                            default = 'faa',
                            help='Fasta files extension')
    parser_add_dir.set_defaults(func=daddDir)

    parser_add_mut = subparsers.add_parser('add-mut',
                               help='Add a mutant of an existing genome')
    parser_add_mut.add_argument('mutfasta', action="store",
                            help='Mutated genes fasta file')
    parser_add_mut.add_argument('mutID', action='store',
                            help='Mutant organism ID')
    parser_add_mut.add_argument('-m', metavar='mutparent', action="store",
                            required = True,
                            help='This mutant parent orgID')
    parser_add_mut.add_argument('-k', metavar='kind', action="store",
                            choices = ['deletion', 'insertion'],
                            default = 'deletion',
                            help='This mutant kind (deletion|insertion)')
    parser_add_mut.add_argument('-n', metavar='name', action="store",
                            default = '',
                            help='Organism name')
    parser_add_mut.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add_mut.set_defaults(func=daddMut)
    
    parser_add_ko = subparsers.add_parser('add-ko',
                           help='Add a KO map (protein code --> KO code)')
    parser_add_ko.add_argument('kofile', action='store', nargs='+',
                            help='KO map')
    parser_add_ko.set_defaults(func=daddKo)
    
    parser_add_ko = subparsers.add_parser('add-orth',
                       help='Add a pangenome (ortholog code --> protein code)')
    parser_add_ko.add_argument('orthfile', action='store',
                            help='Orthologs file')
    parser_add_ko.set_defaults(func=daddPanGenome)

    parser_start = subparsers.add_parser('start', help='Start the analysis')
    parser_start.add_argument('-n', metavar='cpu', action="store", dest='cpu',
                            type=int,
                            default=1,
                            help='Number of CPUs to be used')
    parser_start.add_argument('-s', action="store_true",
                            default=False,
                            help='Skip pangenome creation')
    parser_start.add_argument('-p', action="store", dest='prefix',
                            default='',
                            help='Orthologous groups prefix')
    parser_start.add_argument('-l', action="store_true",
                            default=False,
                            help='Local map2ko')
    parser_start.add_argument('-k', action="store",
                            help='Kegg database location (for local map2ko)')
    parser_start.set_defaults(func=dstart)
    
    parser_map = subparsers.add_parser('map', help='Fetch genomic metabolic maps')
    parser_map.add_argument('-a', '--all', action="store_true",
                            default=False,
                            help='Plot all the single genomic maps')
    parser_map.add_argument('organisms', metavar='orgID', nargs='*',
                            action="store",
                            default=[],
                            help='Genome(s) to be mapped')
    parser_map.set_defaults(func=dmap)
    
    parser_map = subparsers.add_parser('stats', help='Print genomic statistics')
    parser_map.set_defaults(func=dstats)
    
    parser_export = subparsers.add_parser('export', help='Export genomic data')
    parser_export.set_defaults(func=dexport)

    parser_rm = subparsers.add_parser('rm', help='Remove genome analysis')
    parser_rm.add_argument('organisms', metavar='orgID', nargs='+',
                              action="store",
                            help='Organism(s) to be removed')
    parser_rm.set_defaults(func=dremove)
    
    parser_clear = subparsers.add_parser('clear',
                                         help='Clear all the genomic results')
    parser_clear.set_defaults(func=dclear)
    
    return parser.parse_args()

################################################################################

options = getOptions()

logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = ColorFormatter('%(asctime)s - $COLOR%(message)s$RESET','%H:%M:%S')
ch.setFormatter(formatter)
logger.addHandler(ch)


fh = logging.handlers.RotatingFileHandler('ductape.log', maxBytes=1000000)
if options.v == 0:
    ch.setLevel(logging.INFO)
elif options.v >= 1:
    ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - ductgenome - [%(levelname)s] - %(message)s',
                            '%Y-%m-%d %H:%M:%S')
fh.setFormatter(formatter)
logger.addHandler(fh)

wdir = os.path.abspath(options.wdir)
if not os.path.exists(wdir):
    try:
        os.mkdir(wdir)
    except:
        logger.error('Could not create working directory %s'%wdir)
    
project = os.path.join(wdir, options.project)

options.func(options, wdir, project)

touchProject(project)
