#!/usr/bin/env python
"""
DuctGenome

Analyze genome(s) and map them to KEGG
"""
from Bio import SeqIO
from ductape import __version__
from ductape.actions import dInit, touchProject, dGenomeClear, dGenomeRemove, \
    dGenomeAdd, dGenomeDirAdd, dGenomeMutAdd, dGetGenomeSteps, prepareDir, \
    dPanGenomeAdd
from ductape.common.colorlog import ColorFormatter
from ductape.common.database import Organism, Project, Genome, Kegg
from ductape.genome.map2KO import LocalSearch, OnlineSearch
from ductape.genome.pangenome import PanGenomer
from ductape.kegg.kegg import KoMapper
from ductape.terminal import RunThread
import argparse
import logging.handlers
import os
import sys

__author__ = "Marco Galardini"
__prog__ = "ductgenome"

################################################################################
# Log setup

logger = logging.getLogger()

################################################################################
# Methods

def dinit(options, wdir, project):
    if not dInit(project, wdir, options.name, options.descr):
        logger.warning('You can remove the old project file or run ductape rm')
        return False
    else:
        return True

def dadd(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeAdd(project, options.orgID, options.file, options.n, options.d)

def daddDir(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeDirAdd(project, options.folder)

def daddMut(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeMutAdd(project, options.mutID, options.m,
                         options.mutfasta,
                         options.k, options.n, options.d)

def dstart(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    if options.cpu <= 0:
        logging.warning('How can i use %d cpus?'%options.cpu)
        return False
    
    tmp = os.path.join(wdir,'tmp')
    if not prepareDir(wdir, 'tmp'):
        return False
    
    proj = Project(project)
    org = Organism(project)
    gen = Genome(project)
    
    if len(org) == 0:
        logger.warning('No organisms are present yet!')
        logger.warning('Use %s add or %s add-dir!'%(__prog__, __prog__))
        return False
    
    steps = dGetGenomeSteps(project)
    if 'pangenome' in steps or 'map2ko' in steps:
        # Prepare the genomic files
        protdir = os.path.join(tmp,'proteins')
        if not os.path.exists(protdir):
            try:
                os.mkdir(protdir)
            except:
                logger.error('Could not create tmp directory %s'%protdir)
                return False
        infiles = {}
        for organism in org.getAll():
            protfile = os.path.join(protdir, organism.org_id)
            infiles[organism.org_id] = protfile
            SeqIO.write(gen.getRecords(organism.org_id),
                        open(protfile, 'w'), 'fasta')
        #
    for step in steps:
        if step == 'pangenome':
            if options.s:
                logger.warning('Skipping pangenome calculation')
                continue
            if not doPanGenome(project, infiles, options.cpu, options.prefix):
                logger.error('PanGenome could not be calculated!')
                return False
        elif step == 'map2ko':
            if not doMap2KO(project, infiles, local=options.l, keggdb=options.k):
                logger.error('Genome(s) could not be mapped to ko!')
                return False
            if options.l:
                proj.setGenome('map2ko')
                org.setAllGenomeStatus('map2ko')
            else:
                break
        elif step == 'map2kegg':
            if not doMap2KEGG(project):
                logger.error('Genome(s) could not be mapped to kegg!')
                return False
            proj.setGenome('map2kegg')
            org.setAllGenomeStatus('map2kegg')
        else:
            logger.warning('Unrecognized analysis %s'%step)
    
    return True

def daddKo(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    kegg = Kegg(project)
    gen = Genome(project)
    proj = Project(project)
    org = Organism(project)
    
    kaas = OnlineSearch()
    for filename in options.kofile:
        logging.info('Parsing KAAS output %s'%filename)
        kaas.parseKAAS(filename)
        # TODO: here check if results are empty
        kegg.addDraftKOs( set(kaas.results.values()) )
        prot_ko = [[x,y] for x,y in kaas.results.iteritems()]
        gen.addKOs( prot_ko )
    
    logger.info('Mapped %d proteins to KO'%len(kaas.results))
    proj.setGenome('map2ko')
    org.setAllGenomeStatus('map2ko')
    
def daddPanGenome(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPanGenomeAdd(project, options.orthfile)

def dremove(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be removed')
        return False
    return dGenomeRemove(project, options.organisms)

def dclear(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be cleaned up!\n'+
                       'You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dGenomeClear(project)

def doPanGenome(project, infiles, cpu=1, prefix=''):
    pang = PanGenomer(infiles.values(), ncpus=cpu, prefix=prefix)
    
    if not RunThread(pang):
        return False
    
    gen = Genome(project)
    gen.addPanGenome(pang.orthologs)
    
    logger.info('PanGenome size: %d groups'%len(gen.getPanGenome()))
    logger.info('Core size: %d groups'%gen.getLenCore())
    logger.info('Accessory size: %d groups'%gen.getLenAcc())
    logger.info('Unique size: %d groups'%gen.getLenUni())
    
    return True

def doMap2KO(project, infiles, local=False, keggdb='', cpu=1):
    org = Organism(project)
    kegg = Kegg(project)
    gen = Genome(project)
    
    if local:
        for org_id, infile in infiles.iteritems():
            komap = LocalSearch(infile, keggdb, ncpus=cpu)
            if not RunThread(komap):
                return False
            org.setGenomeStatus(org_id, 'map2ko')
            kegg.addDraftKOs( set(komap.results.values()) )
            gen.addKOs( komap.results.iteritems() )
            logger.info('%s - mapped %d proteins to KO'%
                        (org_id, len(komap.results)))
    else:
        kaas = OnlineSearch()
        sys.stdout.write(kaas.getExplanation() + '\n')
        sys.stdout.write('When the analysis are finished launch %s add-ko\n'%
                         __prog__)
        
    return True

def doMap2KEGG(project):
    kegg = Kegg(project)
    kos = [ko.ko_id for ko in kegg.getKO2Analyze()]
    if len(kos) == 0:
        logger.warning('No KO entries to be analyzed!')
        return False
    avoid = [kid for kid in kegg.getAllIDs()]
    
    komap = KoMapper(kos,avoid=avoid)
    
    if not RunThread(komap):
        return False
    
    # Details
    kegg.addKOs(komap.result.ko)
    logger.info('Added %d KO IDs'%len(komap.result.ko))
    kegg.addReactions(komap.result.react)
    logger.info('Added %d Re IDs'%len(komap.result.react))
    kegg.addCompounds(komap.result.comp)
    logger.info('Added %d Co IDs'%len(komap.result.comp))
    kegg.addPathways(komap.result.path)
    logger.info('Added %d Path IDs'%len(komap.result.path))
    # Links
    kegg.addKOReacts(komap.result.koreact)
    kegg.addPathComps(komap.result.pathcomp)
    kegg.addPathReacts(komap.result.pathreact)
    logger.info('Added Kegg links')
    
    return True

################################################################################
# Options

def getOptions():
    description = "Add and analyze genomes"
    parser = argparse.ArgumentParser(description = description,
                                     prog=__prog__)
    parser.add_argument('-p', metavar='project', action='store',
                        dest='project',
                        default='ductape.db',
                        help='Project file')
    parser.add_argument('-w', metavar='workdir', action='store', dest='wdir',
                        default='.',
                        help='Working directory')
    parser.add_argument('-v', action='count',
                        default=0,
                        help='Increase verbosity level')
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)
    subparsers = parser.add_subparsers()

    parser_init = subparsers.add_parser('init', help='Initialize the project')
    parser_init.add_argument('-n', action="store",
                             dest='name',
                             default = 'Project',
                             help='Project name')
    parser_init.add_argument('-d', metavar='descr', action="store",
                            dest='descr',
                            default = 'DuctApe project',
                            help='Project description')
    parser_init.set_defaults(func=dinit)

    parser_add = subparsers.add_parser('add',
                           help='Add a single genome')
    parser_add.add_argument('file', action="store",
                            help='Protein fasta file')
    parser_add.add_argument('orgID', action='store',
                            help='Organism ID')
    parser_add.add_argument('-n', metavar='name', action="store",
                            default = '',
                            help='Organism name')
    parser_add.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add.set_defaults(func=dadd)
    
    parser_add_dir = subparsers.add_parser('add-dir',
           help='Add a series of genomes (orgIDs will be guessed)')
    parser_add_dir.add_argument('folder', action="store",
                            help='Folder where the genomes fasta are stored')
    parser_add_dir.set_defaults(func=daddDir)

    parser_add_mut = subparsers.add_parser('add-mut',
                               help='Add a mutant of an existing genome')
    parser_add_mut.add_argument('mutfasta', action="store",
                            help='Mutated genes fasta file')
    parser_add_mut.add_argument('mutID', action='store',
                            help='Mutant organism ID')
    parser_add_mut.add_argument('-m', metavar='mutparent', action="store",
                            required = True,
                            help='This mutant parent orgID')
    parser_add_mut.add_argument('-k', metavar='kind', action="store",
                            choices = ['deletion', 'insertion'],
                            default = 'deletion',
                            help='This mutant kind')
    parser_add_mut.add_argument('-n', metavar='name', action="store",
                            default = '',
                            help='Organism name')
    parser_add_mut.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add_mut.set_defaults(func=daddMut)
    
    parser_add_ko = subparsers.add_parser('add-ko',
                           help='Add a KO map (protein code --> KO code)')
    parser_add_ko.add_argument('kofile', action='store', nargs='+',
                            help='KO map')
    parser_add_ko.set_defaults(func=daddKo)
    
    parser_add_ko = subparsers.add_parser('add-orth',
                       help='Add a pangenome (ortholog code --> protein code)')
    parser_add_ko.add_argument('orthfile', action='store',
                            help='Orthologs file')
    parser_add_ko.set_defaults(func=daddPanGenome)

    parser_start = subparsers.add_parser('start', help='Start the analysis')
    parser_start.add_argument('-n', metavar='cpu', action="store", dest='cpu',
                            type=int,
                            default=1,
                            help='Number of CPUs to be used')
    parser_start.add_argument('-s', action="store_true",
                            default=False,
                            help='Skip pangenome creation')
    parser_start.add_argument('-p', action="store", dest='prefix',
                            default='',
                            help='Orthologous groups prefix')
    parser_start.add_argument('-l', action="store_true",
                            default=False,
                            help='Local map2ko')
    parser_start.add_argument('-k', action="store",
                            help='Kegg database location (for local map2ko)')
    parser_start.set_defaults(func=dstart)

    parser_rm = subparsers.add_parser('rm', help='Remove genome analysis')
    parser_rm.add_argument('organisms', metavar='orgID', nargs='+',
                              action="store",
                            help='Organism(s) to be removed')
    parser_rm.set_defaults(func=dremove)
    
    parser_clear = subparsers.add_parser('clear',
                                         help='Clear all the genomic results')
    parser_clear.set_defaults(func=dclear)
    
    return parser.parse_args()

################################################################################
# 

options = getOptions()

logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = ColorFormatter('%(asctime)s - $COLOR%(message)s$RESET','%H:%M:%S')
ch.setFormatter(formatter)
logger.addHandler(ch)


fh = logging.handlers.RotatingFileHandler('ductape.log', maxBytes=1000000)
if options.v == 0:
    ch.setLevel(logging.INFO)
elif options.v >= 1:
    ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - ductgenome - [%(levelname)s] - %(message)s',
                            '%Y-%m-%d %H:%M:%S')
fh.setFormatter(formatter)
logger.addHandler(fh)

wdir = os.path.abspath(options.wdir)
if not os.path.exists(wdir):
    try:
        os.mkdir(wdir)
    except:
        logger.error('Could not create working directory %s'%wdir)
    
project = os.path.join(wdir, options.project)

options.func(options, wdir, project)

touchProject(project)
