#!/usr/bin/python
"""
DuctPhenome

Analyze phenome(s) and map them to KEGG
"""
from ductape import __version__
from ductape.actions import dInit, touchProject, dPhenomeAdd, dPhenomeMultiAdd, \
    dPhenomeDirAdd, dPhenomeMutAdd, dPhenomeZero
from ductape.common.colorlog import ColorFormatter
from ductape.kegg.kegg import CompMapper
from ductape.phenome.biolog import Experiment, BiologCluster, getPlates, \
    getSinglePlates, BiologPlot
from ductape.storage.SQLite.database import Biolog, Kegg, Project, Organism
from ductape.terminal import RunThread
import argparse
import logging.handlers
import os

__author__ = "Marco Galardini"
__prog__ = "dphenome"

################################################################################
# Log setup

logger = logging.getLogger('ductape')

################################################################################
# Methods

def dinit(options, wdir, project):
    if not dInit(project, wdir, options.name, options.descr):
        logger.warning('You can remove the old project file or run dape rm')
        return False
    else:
        return True

def dadd(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPhenomeAdd(project, options.orgID, options.file,
                       name=options.n, descr=options.d)

def daddMulti(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPhenomeMultiAdd(project, options.file)

def daddDir(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPhenomeDirAdd(project, options.folder, options.e)

def daddMut(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPhenomeMutAdd(project, options.mutID, options.m,
                         options.mutphenome,
                         options.k, options.n, options.d)

def dzero(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    return dPhenomeZero(project, options.b)

def dstart(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    # Clusterize the biolog experiment
    if not doClusterPhenome(project, cpu=options.cpu):
        logger.error('Phenome experiment could not be clustered!')
        return False
    
    # We have to map 2 KEGG?
    proj = Project(project)
    proj.getProject()
    
    if proj.phenome == 'map2kegg':
        logger.info('Skipping mapping to KEGG')
        return True
    
    # Map biolog compunds to kegg
    if not doMap2KEGG(project):
        logger.error('Phenomic compounds could not be mapped to kegg!')
        return False
    
    proj.setPhenome('map2kegg')
    
    return True

def dplot(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    
    biolog = Biolog(project)
    sigs = [s for s in biolog.getAllSignals()]
    plates = [p for p in getSinglePlates(sigs)]
    
    bplot = BiologPlot(plates, colors={'Rm1021':'red', 'AK83':'blue',
        'BL225C':'green','AK58':'orange'},
               maxsig=400, plotAll=True)

    if not RunThread(bplot):
        return False
    
def dpurge(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    # TODO
  
def dstats(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    # TODO

def dexport(options, wdir, project):
    if not touchProject(project):
        logger.warning('You can setup a new project by running %s init'%
                       __prog__)
        return False
    # TODO

def dremove(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be removed!\n'+
                       'You can setup a new project by running %s init'%
                       __prog__)
        return False
    # TODO

def dclear(options, wdir, project):
    if not touchProject(project):
        logger.warning('Nothing to be cleaned up!\n'+
                       'You can setup a new project by running %s init'%
                       __prog__)
        return False
    # TODO

def doClusterPhenome(project, cpu=1):
    biolog = Biolog(project)
    # Get Plate Objects
    # TODO: here check the zero subtraction state? (it may be mixed up)
    sigs = [s for s in biolog.getAllSignals()]
    plates = [p for p in getPlates(sigs)]
    isZero = biolog.atLeastOneZeroSubtracted()

    if len(plates) == 0:
        logger.warning('No phenomic data available, skipping clustering')
        return True

    exp = Experiment(plates=plates, zero=isZero)
    
    bclust = BiologCluster(exp, ncpus=cpu)

    if not RunThread(bclust):
        return False
    
    # Put in the DB!
    wells = [w for w in exp.getWells(params=False)]
    for w in wells:
        if biolog.isZeroSubtracted(w.plate_id, w.well_id, w.strain, w.replica):
            w.zero = True
    biolog.addWells(wells, clustered=True)
    
    logger.info('Analyzed and clustered %d phenomic experiments'%len(wells))
    
    return True

def doMap2KEGG(project):
    biolog = Biolog(project)
    compounds = ['cpd:'+co.co_id for co in biolog.getCompounds2Analyse()]
    if len(compounds) == 0:
        logger.error('No phenomic compounds to be analyzed!')
        return False
    
    kegg = Kegg(project)
    avoid = [kid for kid in kegg.getAllIDs()]
    
    komap = CompMapper(compounds,avoid=avoid)
    
    if not RunThread(komap):
        return False
    
    kegg.addCompounds(komap.result.comp)
    logger.info('Added %d Co IDs'%len(komap.result.comp))
    kegg.addReactions(komap.result.react)
    logger.info('Added %d Re IDs'%len(komap.result.react))
    kegg.addPathways(komap.result.path)
    logger.info('Added %d Path IDs'%len(komap.result.path))
    # Links
    kegg.addPathComps(komap.result.pathcomp)
    kegg.addPathReacts(komap.result.pathreact)
    kegg.addReactComps(komap.result.reactcomp)
    kegg.addCompReacts(komap.result.compreact)
    logger.info('Added Kegg links')
    # HTML maps
    kegg.addPathHtml(komap.result.pathmaps)
    logger.info('Added Kegg maps')
    
    return True

################################################################################
# Options

def getOptions():
    description = "Add and analyze phenomes"
    parser = argparse.ArgumentParser(description = description,
                                     prog=__prog__)
    parser.add_argument('-p', metavar='project', action='store',
                        dest='project',
                        default='ductape.db',
                        help='Project file')
    parser.add_argument('-w', metavar='workdir', action='store', dest='wdir',
                        default='.',
                        help='Working directory')
    parser.add_argument('-v', action='count',
                        default=0,
                        help='Increase verbosity level')
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)
    subparsers = parser.add_subparsers()

    parser_init = subparsers.add_parser('init', help='Initialize the project')
    parser_init.add_argument('-n', action="store",
                             dest='name',
                             default = 'Project',
                             help='Project name')
    parser_init.add_argument('-d', metavar='descr', action="store",
                            dest='descr',
                            default = 'DuctApe project',
                            help='Project description')
    parser_init.set_defaults(func=dinit)

    parser_add = subparsers.add_parser('add',
                           help='Add a single phenomic experiment')
    parser_add.add_argument('file', action="store",
                            help='Phenomic data file (biolog generated .csv)')
    parser_add.add_argument('orgID', action='store',
                            help='Organism ID')
    parser_add.add_argument('-n', metavar='name', action="store",
                           default = '',
                            help='Organism name')
    parser_add.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add.set_defaults(func=dadd)
    
    parser_add_multi = subparsers.add_parser('add-multi',
                           help='Add a single phenomic file (with multiple strains)')
    parser_add_multi.add_argument('file', action="store",
                            help='Phenomic data file (biolog generated .csv)')
    parser_add_multi.set_defaults(func=daddMulti)
    
    parser_add_dir = subparsers.add_parser('add-dir',
           help='Add a series of phenomes (orgIDs will be guessed)')
    parser_add_dir.add_argument('folder', action="store",
                            help='Folder where the phenomic files are stored')
    parser_add_dir.add_argument('-e', metavar='extension', action="store",
                            default = 'csv',
                            help='Phenomic files extension')
    parser_add_dir.set_defaults(func=daddDir)

    parser_add_mut = subparsers.add_parser('add-mut',
                               help='Add a mutant of an existing genome')
    parser_add_mut.add_argument('mutphenome', action="store",
                            help='Mutated organism phenomic file')
    parser_add_mut.add_argument('mutID', action='store',
                            help='Mutant organism ID')
    parser_add_mut.add_argument('-m', metavar='mutparent', action="store",
                            required = True,
                            help='This mutant parent orgID')
    parser_add_mut.add_argument('-k', metavar='kind', action="store",
                            choices = ['deletion', 'insertion'],
                            default = 'deletion',
                            help='This mutant kind (deletion|insertion)')
    parser_add_mut.add_argument('-n', metavar='name', action="store",
                            default = '',
                            help='Organism name')
    parser_add_mut.add_argument('-d', metavar='descr', action="store",
                            default = '',
                            help='Organism description')
    parser_add_mut.set_defaults(func=daddMut)

    parser_zero = subparsers.add_parser('zero', help='Biolog signals zero subtraction')
    parser_zero.add_argument('-b', metavar='blankfile', action="store",
                            default = None,
                            help='Blank plate(s) phenomic file')
    parser_zero.set_defaults(func=dzero)

    parser_start = subparsers.add_parser('start', help='Start the analysis')
    parser_start.add_argument('-n', metavar='cpu', action="store", dest='cpu',
                            type=int,
                            default=1,
                            help='Number of CPUs to be used')
    parser_start.set_defaults(func=dstart)
    
    parser_plot = subparsers.add_parser('plot', help='Plot the phenomic data')
    parser_plot.set_defaults(func=dplot)
    
    parser_purge = subparsers.add_parser('purge', help='Remove inconsistent replicas')
    parser_purge.set_defaults(func=dpurge)
    
    parser_map = subparsers.add_parser('stats', help='Print phenomic statistics')
    parser_map.set_defaults(func=dstats)
    
    parser_export = subparsers.add_parser('export', help='Export phenomic data')
    parser_export.set_defaults(func=dexport)

    parser_rm = subparsers.add_parser('rm', help='Remove phenome analysis')
    parser_rm.add_argument('organisms', metavar='orgID', nargs='+',
                              action="store",
                            help='Organism(s) to be removed')
    parser_rm.set_defaults(func=dremove)
    
    parser_clear = subparsers.add_parser('clear',
                                         help='Clear all the phenomic results')
    parser_clear.set_defaults(func=dclear)
    
    return parser.parse_args()

################################################################################

options = getOptions()

logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = ColorFormatter('%(asctime)s - $COLOR%(message)s$RESET','%H:%M:%S')
ch.setFormatter(formatter)
logger.addHandler(ch)


fh = logging.handlers.RotatingFileHandler('ductape.log', maxBytes=2000000)
if options.v == 0:
    ch.setLevel(logging.INFO)
elif options.v >= 1:
    ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
                            '%Y-%m-%d %H:%M:%S')
fh.setFormatter(formatter)
logger.addHandler(fh)

wdir = os.path.abspath(options.wdir)
if not os.path.exists(wdir):
    try:
        os.mkdir(wdir)
    except:
        logger.error('Could not create working directory %s'%wdir)
    
project = os.path.join(wdir, options.project)

options.func(options, wdir, project)

touchProject(project)
